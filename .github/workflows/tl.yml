name: Generate RenPy Translation Template

on:
  workflow_dispatch: # Manual trigger only
    inputs:
      language_code:
        description: 'Language code (e.g., id, en, jp)'
        required: false
        default: 'id'

jobs:
  generate-template:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Project Structure
      run: |
        mkdir -p game
        cp tl/*.rpy game/
        echo "File yang akan di-generate template:"
        ls -l game/
        
    - name: Download Ren'Py SDK 8.0.3
      run: |
        # Download dan extract Ren'Py
        wget -q https://www.renpy.org/dl/8.0.3/renpy-8.0.3-sdk.tar.bz2
        tar -xjf renpy-8.0.3-sdk.tar.bz2
        mv renpy-8.0.3-sdk renpy-sdk
        
        # Set permissions
        chmod +x renpy-sdk/renpy.py
        
        # Create minimal environment setup
        cd renpy-sdk
        
        # Try to set up the environment properly
        export RENPY_PLATFORM="linux-x86_64"
        
        echo "Ren'Py SDK contents:"
        ls -la
        
        echo "Testing Ren'Py startup:"
        python renpy.py --help || echo "Help command failed, but that's expected"
        
    - name: Setup Python for Ren'Py
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'  # More compatible
        
    - name: Install Ren'Py Dependencies
      run: |
        # Install only available dependencies
        pip install future
        pip install pygame==1.9.6 || pip install pygame
        # Skip pygame_sdl2 and pefile - not needed for CLI operations
        
    - name: Generate Translation Template
      run: |
        # Set environment variables untuk Ren'Py
        export RENPY_PLATFORM="linux-x86_64"
        export PYTHONPATH="$PWD/renpy-sdk:$PYTHONPATH"
        
        cd renpy-sdk
        
        LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
        echo "Generating translation template for language: $LANG_CODE"
        
        # Try multiple methods with better error handling
        success=false
        
        # Method 1: Standard translate command
        echo "Trying standard translate command..."
        if python renpy.py ../. translate "$LANG_CODE" --extract 2>&1; then
          echo "Standard command succeeded!"
          success=true
        else
          echo "Standard command failed, trying alternatives..."
          
          # Method 2: Different syntax
          if python renpy.py ../. translate "$LANG_CODE" 2>&1; then
            echo "Alternative command succeeded!"
            success=true
          else
            echo "All automatic methods failed. Will create manual template."
          fi
        fi
        
        # Check what files were generated
        echo "Checking for generated files..."
        find .. -path "*/tl/$LANG_CODE/*" -name "*.rpy" -type f || echo "No automatic tl/$LANG_CODE files found"
        find .. -path "*/game/tl/$LANG_CODE/*" -name "*.rpy" -type f || echo "No automatic game/tl/$LANG_CODE files found"
        
        # Also check current directory
        find . -path "*/tl/$LANG_CODE/*" -name "*.rpy" -type f || echo "No local tl files found"
        
    - name: Process and Rename Templates
      run: |
        LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
        mkdir -p "output/tl/$LANG_CODE"
        
        echo "=== DEBUGGING: Looking for generated files ==="
        
        # Check all possible locations for generated files
        echo "Files in current directory:"
        find . -name "*.rpy" -type f | head -20
        
        echo "Files in tl directories:"
        find . -path "*/tl/*" -name "*.rpy" -type f
        
        echo "All translation-related directories:"
        find . -type d -name "tl" -o -name "*translate*" 2>/dev/null
        
        # Check multiple possible locations for generated files
        found_files=false
        
        for search_path in "tl/$LANG_CODE" "game/tl/$LANG_CODE" "renpy-sdk/tl/$LANG_CODE" "./tl/$LANG_CODE"; do
          echo "Checking: $search_path"
          if [ -d "$search_path" ] && [ "$(ls -A "$search_path" 2>/dev/null)" ]; then
            echo "✓ Found files in: $search_path"
            ls -la "$search_path"
            
            for file in "$search_path"/*.rpy; do
              if [ -f "$file" ]; then
                basename_file=$(basename "$file" .rpy)
                cp "$file" "output/tl/$LANG_CODE/${basename_file}_tl.rpy"
                echo "✓ Copied: ${basename_file}_tl.rpy"
                found_files=true
              fi
            done
          else
            echo "✗ No files in: $search_path"
          fi
        done
        
        # If generation failed, create manual templates from source files
        if [ "$found_files" = false ]; then
          echo "=== No auto-generated files found. Creating manual templates ==="
          
          for rpy_file in game/*.rpy; do
            if [ -f "$rpy_file" ]; then
              basename_file=$(basename "$rpy_file" .rpy)
              template_file="output/tl/$LANG_CODE/${basename_file}_tl.rpy"
              
              echo "Creating manual template for: $basename_file"
              
              # Create comprehensive manual template
              cat << EOF > "$template_file"
# Translation template for $rpy_file
# Language: $LANG_CODE
# Generated manually - edit the Indonesian text below

EOF
              
              # Extract dialogues and create translate blocks
              awk '
              BEGIN { 
                label_name = "unknown"
                block_count = 0
              }
              /^label [a-zA-Z_][a-zA-Z0-9_]*:/ { 
                match($0, /^label ([a-zA-Z_][a-zA-Z0-9_]*):/, arr)
                if (arr[1]) label_name = arr[1]
                print "\n# === Label: " label_name " ==="
                next
              }
              /^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*"[^"]*"[[:space:]]*$/ {
                block_count++
                match($0, /^[[:space:]]*([a-zA-Z_][a-zA-Z0-9_]*)[[:space:]]*"([^"]*)"/, arr)
                if (arr[1] && arr[2]) {
                  print "translate '$LANG_CODE' " label_name "_" block_count ":"
                  print "    " arr[1] " \"" arr[2] "\""
                  print ""
                }
                next
              }
              /^[[:space:]]*"[^"]*"[[:space:]]*$/ {
                block_count++
                match($0, /^[[:space:]]*"([^"]*)"/, arr)
                if (arr[1]) {
                  print "translate '$LANG_CODE' " label_name "_" block_count ":"
                  print "    \"" arr[1] "\""
                  print ""
                }
                next
              }
              /^[[:space:]]*menu:/ {
                in_menu = 1
                block_count++
                menu_lines = "translate '$LANG_CODE' " label_name "_menu_" block_count ":\n    menu:"
                next
              }
              in_menu && /^[[:space:]]*"[^"]*":/ {
                match($0, /"([^"]*)"/, arr)
                if (arr[1]) {
                  menu_lines = menu_lines "\n        \"" arr[1] "\":"
                  menu_lines = menu_lines "\n            # Original jump/call here"
                }
                next
              }
              in_menu && /^[[:space:]]*[a-zA-Z_]/ {
                print menu_lines "\n"
                in_menu = 0
                next
              }
              ' "$rpy_file" >> "$template_file"
              
              echo "✓ Created manual template: ${basename_file}_tl.rpy"
              found_files=true
            fi
          done
        fi
        
        # Final check
        if [ "$found_files" = true ]; then
          echo "=== SUCCESS: Template files created ==="
          ls -la "output/tl/$LANG_CODE/"
        else
          echo "=== ERROR: No template files could be created ==="
          echo "Creating error report..."
          echo "No translatable content found in source files." > "output/tl/$LANG_CODE/ERROR_REPORT.txt"
          echo "Source files checked:" >> "output/tl/$LANG_CODE/ERROR_REPORT.txt"
          ls -la game/ >> "output/tl/$LANG_CODE/ERROR_REPORT.txt"
        fi
        
    - name: Show Results
      run: |
        LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
        echo "Generated translation templates for language: $LANG_CODE"
        ls -la "output/tl/$LANG_CODE/"
        
        echo -e "\nSample content:"
        for file in output/tl/$LANG_CODE/*.rpy; do
          if [ -f "$file" ]; then
            echo "=== $(basename $file) ==="
            head -15 "$file"
            echo ""
            break
          fi
        done
        
    - name: Upload Templates
      uses: actions/upload-artifact@v4
      with:
        name: renpy-translation-id-templates
        path: output/
        
    - name: Commit Generated Templates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add output/
        git diff --staged --quiet || git commit -m "Auto-generated Ren'Py translation templates for ID [skip ci]"
        git push || echo "Nothing new to commit"