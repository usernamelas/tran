name: v2

on:
  workflow_dispatch:

jobs:
  # Job 1: Setup dan categorisasi file
  setup-and-categorize:
    runs-on: ubuntu-latest
    outputs:
      setup-success: ${{ steps.organize.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install translate-shell from GitHub
        run: |
          git clone https://github.com/soimort/translate-shell
          cd translate-shell
          make
          sudo make install
          pip install requests

      - name: Send start notification
        run: |
          python3 py/telegram_notify.py "üöÄ MEMULAI TERJEMAHAN" "Scanning file .rpy..."

      - name: Organize files by size
        id: organize
        run: |
          echo "üìÇ Organizing files by size..."
          python3 py/manager2.py tl
          
          # Validate batch directories were created
          echo "üîç Checking batch directories..."
          for dir in batch_kecil batch_sedang batch_besar; do
            if [ -d "$dir" ]; then
              count=$(ls $dir/*.rpy 2>/dev/null | wc -l)
              echo "‚úÖ $dir: $count files"
            else
              echo "‚ö†Ô∏è $dir: directory not found"
            fi
          done
          
          # Check total files to process
          total_files=$(find batch_* -name "*.rpy" 2>/dev/null | wc -l)
          if [ $total_files -eq 0 ]; then
            echo "‚ùå No .rpy files found to translate!"
            exit 1
          fi
          
          echo "üìä Total files to translate: $total_files"

      - name: Reset progress files
        run: |
          echo "" > translation_progress.txt
          echo "setup_completed" > workflow_status.txt

  # Job 2: Translate BESAR files (1000+ lines) - SEQUENTIAL
  translate-besar:
    needs: setup-and-categorize
    runs-on: ubuntu-latest
    if: success()
    outputs:
      besar-count: ${{ steps.translate.outputs.file-count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python and dependencies
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Check batch_besar directory
        run: |
          if [ ! -d "batch_besar" ]; then
            echo "‚ö†Ô∏è batch_besar directory not found, skipping..."
            echo "file-count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          file_count=$(ls batch_besar/*.rpy 2>/dev/null | wc -l)
          echo "üìÅ batch_besar contains: $file_count files"
          
          if [ $file_count -eq 0 ]; then
            echo "‚ö†Ô∏è No files in batch_besar, skipping..."
            echo "file-count=0" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Process BESAR files SEQUENTIALLY
        id: translate
        run: |
          if [ ! -d "batch_besar" ] || [ $(ls batch_besar/*.rpy 2>/dev/null | wc -l) -eq 0 ]; then
            echo "‚ö†Ô∏è Skipping BESAR translation - no files to process"
            echo "file-count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üî¥ Processing BESAR files (1000+ lines) - SEQUENTIAL"
          
          # Start translation process
          python3 py/translate.py batch_besar &
          PID=$!
          
          # Progress monitoring
          while kill -0 $PID 2>/dev/null; do
            if [ -f "translation_progress.txt" ]; then
              python3 py/send_progress_update.py "BATCH BESAR" || true
            fi
            sleep 30
          done
          
          # Wait for process to complete
          wait $PID
          translation_exit_code=$?
          
          if [ $translation_exit_code -eq 0 ]; then
            echo "‚úÖ BESAR translation completed successfully"
            python3 py/send_final_update.py "BATCH BESAR" || true
            
            # Count translated files
            translated_count=$(ls id/*.rpy 2>/dev/null | grep -E "(batch_besar|_besar)" | wc -l || echo 0)
            echo "file-count=$translated_count" >> $GITHUB_OUTPUT
          else
            echo "‚ùå BESAR translation failed with exit code: $translation_exit_code"
            echo "file-count=0" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Job 3: Translate SEDANG files (200-999 lines) - SEQUENTIAL  
  translate-sedang:
    needs: setup-and-categorize
    runs-on: ubuntu-latest
    if: success()
    outputs:
      sedang-count: ${{ steps.translate.outputs.file-count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python and dependencies
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Check batch_sedang directory
        run: |
          if [ ! -d "batch_sedang" ]; then
            echo "‚ö†Ô∏è batch_sedang directory not found, skipping..."
            exit 0
          fi
          
          file_count=$(ls batch_sedang/*.rpy 2>/dev/null | wc -l)
          echo "üìÅ batch_sedang contains: $file_count files"

      - name: Process SEDANG files SEQUENTIALLY
        id: translate
        run: |
          if [ ! -d "batch_sedang" ] || [ $(ls batch_sedang/*.rpy 2>/dev/null | wc -l) -eq 0 ]; then
            echo "‚ö†Ô∏è Skipping SEDANG translation - no files to process"
            echo "file-count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üü° Processing SEDANG files (200-999 lines) - SEQUENTIAL"
          
          # Start translation process
          python3 py/translate.py batch_sedang &
          PID=$!
          
          # Progress monitoring
          while kill -0 $PID 2>/dev/null; do
            if [ -f "translation_progress.txt" ]; then
              python3 py/send_progress_update.py "BATCH SEDANG" || true
            fi
            sleep 30
          done
          
          # Wait for process to complete
          wait $PID
          translation_exit_code=$?
          
          if [ $translation_exit_code -eq 0 ]; then
            echo "‚úÖ SEDANG translation completed successfully"
            python3 py/send_final_update.py "BATCH SEDANG" || true
            
            # Count translated files
            translated_count=$(ls id/*.rpy 2>/dev/null | grep -E "(batch_sedang|_sedang)" | wc -l || echo 0)
            echo "file-count=$translated_count" >> $GITHUB_OUTPUT
          else
            echo "‚ùå SEDANG translation failed with exit code: $translation_exit_code"
            echo "file-count=0" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Job 4: Translate KECIL files (1-199 lines) - SEQUENTIAL
  translate-kecil:
    needs: setup-and-categorize
    runs-on: ubuntu-latest
    if: success()
    outputs:
      kecil-count: ${{ steps.translate.outputs.file-count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python and dependencies
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Check batch_kecil directory
        run: |
          if [ ! -d "batch_kecil" ]; then
            echo "‚ö†Ô∏è batch_kecil directory not found, skipping..."
            exit 0
          fi
          
          file_count=$(ls batch_kecil/*.rpy 2>/dev/null | wc -l)
          echo "üìÅ batch_kecil contains: $file_count files"

      - name: Process KECIL files SEQUENTIALLY
        id: translate
        run: |
          if [ ! -d "batch_kecil" ] || [ $(ls batch_kecil/*.rpy 2>/dev/null | wc -l) -eq 0 ]; then
            echo "‚ö†Ô∏è Skipping KECIL translation - no files to process"
            echo "file-count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üü¢ Processing KECIL files (1-199 lines) - SEQUENTIAL"
          
          # Start translation process
          python3 py/translate.py batch_kecil &
          PID=$!
          
          # Progress monitoring
          while kill -0 $PID 2>/dev/null; do
            if [ -f "translation_progress.txt" ]; then
              python3 py/send_progress_update.py "BATCH KECIL" || true
            fi
            sleep 30
          done
          
          # Wait for process to complete
          wait $PID
          translation_exit_code=$?
          
          if [ $translation_exit_code -eq 0 ]; then
            echo "‚úÖ KECIL translation completed successfully"
            python3 py/send_final_update.py "BATCH KECIL" || true
            
            # Count translated files
            translated_count=$(ls id/*.rpy 2>/dev/null | grep -E "(batch_kecil|_kecil)" | wc -l || echo 0)
            echo "file-count=$translated_count" >> $GITHUB_OUTPUT
          else
            echo "‚ùå KECIL translation failed with exit code: $translation_exit_code"
            echo "file-count=0" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Job 5: Final organization and cleanup
  finalize:
    needs: [translate-besar, translate-sedang, translate-kecil]
    runs-on: ubuntu-latest
    if: always() # Run even if some translation jobs failed
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python for notifications
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Check translation results
        id: check_results
        run: |
          echo "üîç Checking translation results..."
          
          # Check if id directory exists
          if [ ! -d "id" ]; then
            echo "‚ùå id/ directory not found - all translation jobs failed!"
            echo "has-results=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Count translated files
          translated_count=$(ls id/*.rpy 2>/dev/null | wc -l)
          echo "üìä Found $translated_count translated files"
          
          if [ $translated_count -eq 0 ]; then
            echo "‚ùå No translated files found - all translation jobs failed!"
            echo "has-results=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Translation successful - found $translated_count files"
            echo "has-results=true" >> $GITHUB_OUTPUT
            echo "translated-count=$translated_count" >> $GITHUB_OUTPUT
          fi

      - name: Generate final statistics
        if: steps.check_results.outputs.has-results == 'true'
        run: |
          echo "üìä Generating final statistics..."
          
          # Count files
          translated_count=$(ls id/*.rpy 2>/dev/null | wc -l || echo 0)
          mapping_count=$(ls id/mapping/*_mapping.txt 2>/dev/null | wc -l || echo 0)
          log_count=$(ls id/log/*_log.txt 2>/dev/null | wc -l || echo 0)
          
          # Get original count from batch directories (before cleanup)
          original_count=0
          for dir in batch_kecil batch_sedang batch_besar; do
            if [ -d "$dir" ]; then
              count=$(ls $dir/*.rpy 2>/dev/null | wc -l)
              original_count=$((original_count + count))
            fi
          done
          
          # If no batch dirs, use translated count as estimate
          if [ $original_count -eq 0 ]; then
            original_count=$translated_count
          fi
          
          # Calculate success rate
          if [ $original_count -gt 0 ]; then
            success_rate=$(echo "scale=1; $translated_count * 100 / $original_count" | bc -l 2>/dev/null || echo "N/A")
          else
            success_rate="N/A"
          fi
          
          # Create final statistics file
          cat > final_stats.txt << EOF
          RENPY TRANSLATION PIPELINE - FINAL REPORT
          ==========================================
          üìÖ Completed: $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          üìä PROCESSING SUMMARY:
          - Original files processed: $original_count
          - Successfully translated: $translated_count
          - Mapping files created: $mapping_count
          - Log files generated: $log_count
          
          üìÅ FINAL STRUCTURE:
          id/
          ‚îú‚îÄ‚îÄ *.rpy ($translated_count translated files)
          ‚îú‚îÄ‚îÄ mapping/ ($mapping_count mapping files)
          ‚îî‚îÄ‚îÄ log/ ($log_count log files)
          
          üéØ SUCCESS RATE:
          - Translation: ${success_rate}%
          
          ‚úÖ Translation pipeline completed successfully!
          EOF
          
          echo "üìÑ Final statistics saved to final_stats.txt"
          echo "üìä Translation success rate: ${success_rate}%"

      - name: Send final completion report
        run: |
          if [ "${{ steps.check_results.outputs.has-results }}" = "true" ]; then
            # Success case - read final statistics
            if [ -f "final_stats.txt" ]; then
              FINAL_REPORT=$(cat final_stats.txt)
              python3 py/telegram_notify.py "üéâ TERJEMAHAN SELESAI" "$FINAL_REPORT"
            else
              # Fallback for successful translation
              translated_count="${{ steps.check_results.outputs.translated-count }}"
              python3 py/telegram_notify.py "üéâ TERJEMAHAN SELESAI" \
                "‚úÖ Translation Complete!
                üìÅ Successfully translated: $translated_count files
                üìä Check id/ folder for all results"
            fi
          else
            # Failure case
            python3 py/telegram_notify.py "‚ùå TERJEMAHAN GAGAL" \
              "‚ùå Translation pipeline failed!
              üîç Possible causes:
              - No .rpy files found to translate
              - Translation script errors
              - Setup/categorization failed
              
              Check workflow logs for details."
          fi

      - name: Cleanup temporary files
        if: always()
        run: |
          echo "üßπ Cleaning up temporary files..."
          
          # Remove batch directories
          rm -rf batch_kecil batch_sedang batch_besar || true
          
          # Remove output_tl (moved to id/)
          rm -rf output_tl || true
          
          # Remove progress files
          rm -f translation_progress.txt restore_progress.txt workflow_status.txt || true
          
          # Move final stats if translation was successful
          if [ -f "final_stats.txt" ] && [ -d "id" ]; then
            mv final_stats.txt id/final_statistics.txt || true
            echo "üìä Final statistics moved to id/final_statistics.txt"
          elif [ -f "final_stats.txt" ]; then
            echo "‚ö†Ô∏è final_stats.txt exists but id/ directory not found"
            rm -f final_stats.txt || true
          fi
          
          echo "‚úÖ Cleanup completed"
          echo "üìÅ Results are organized in the 'id/' directory"

      - name: Create results summary
        if: steps.check_results.outputs.has-results == 'true'
        run: |
          echo "üì¶ Creating results summary..."
          
          # Create README for results
          cat > id/README.md << 'EOF'
          # RenPy Translation Results
          
          This directory contains the translated RenPy files from the translation pipeline.
          
          ## Directory Structure
          
          ```
          id/
          ‚îú‚îÄ‚îÄ *.rpy                    # Translated RenPy files (main output)
          ‚îú‚îÄ‚îÄ mapping/                 # Translation mapping files
          ‚îÇ   ‚îî‚îÄ‚îÄ *_mapping.txt        # Tag mappings for each file
          ‚îú‚îÄ‚îÄ log/                     # Translation log files  
          ‚îÇ   ‚îî‚îÄ‚îÄ *_log.txt            # Processing logs for each file
          ‚îî‚îÄ‚îÄ final_statistics.txt     # Complete pipeline statistics
          ```
          
          ## Usage
          
          - **Main translated files**: Use the `.rpy` files in the root of this directory
          - **Troubleshooting**: Check files in `log/` directory for any issues
          - **Statistics**: View `final_statistics.txt` for complete pipeline report
          
          Generated by RenPy Translation Pipeline
          EOF
          
          echo "üìö README.md created in id/ directory"
          echo "üéØ Pipeline completed successfully!"