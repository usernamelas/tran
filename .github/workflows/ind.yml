name: Ren'Py Translation Template Generator

on:
  workflow_dispatch:
    inputs:
      language_code:
        description: 'Language code (e.g., id, en, jp)'
        required: false
        default: 'id'

jobs:
  generate-template:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Setup Project Structure
        run: |
          mkdir -p game
          if [ -d "tl" ] && [ "$(ls -A tl 2>/dev/null)" ]; then
            cp tl/*.rpy game/ 2>/dev/null || echo "No .rpy files to copy from tl/"
          fi
          echo "Files in project structure:"
          find . -name "*.rpy" -type f | head -10
          
      - name: Download and Setup Ren'Py SDK
        run: |
          # Download Ren'Py SDK
          wget -q https://www.renpy.org/dl/8.0.3/renpy-8.0.3-sdk.tar.bz2
          tar -xjf renpy-8.0.3-sdk.tar.bz2
          mv renpy-8.0.3-sdk renpy-sdk
          
          # Set permissions
          chmod +x renpy-sdk/renpy.py
          
          # Install minimal dependencies
          pip install pygame==2.1.0 future six
          
          echo "Ren'Py SDK setup complete"
          ls -la renpy-sdk/
          
      - name: Generate Translation Template
        run: |
          cd renpy-sdk
          LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
          echo "Generating translation template for language: $LANG_CODE"
          
          # Set environment variables
          export RENPY_PLATFORM="linux-x86_64"
          export PYTHONPATH="$PWD:$PYTHONPATH"
          
          # Try to generate translation template
          if python renpy.py ../. translate "$LANG_CODE" --extract; then
            echo "✓ Translation template generated successfully"
          else
            echo "⚠ Automatic generation failed, will create manual template"
          fi
          
      - name: Process Generated Templates
        run: |
          LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
          mkdir -p "output/tl/$LANG_CODE"
          
          echo "=== Processing generated translation files ==="
          
          # Check for auto-generated files
          found_files=false
          for search_path in "game/tl/$LANG_CODE" "tl/$LANG_CODE" "renpy-sdk/game/tl/$LANG_CODE"; do
            if [ -d "$search_path" ] && [ "$(ls -A "$search_path"/*.rpy 2>/dev/null)" ]; then
              echo "✓ Found generated files in: $search_path"
              cp "$search_path"/*.rpy "output/tl/$LANG_CODE/"
              found_files=true
              break
            fi
          done
          
          # If no auto-generated files, create manual templates
          if [ "$found_files" = false ]; then
            echo "Creating manual templates from source files..."
            
            # Find all .rpy files in the project
            find . -name "*.rpy" -not -path "*/renpy-sdk/*" -not -path "*/output/*" | while read -r rpy_file; do
              if [ -f "$rpy_file" ]; then
                basename_file=$(basename "$rpy_file" .rpy)
                template_file="output/tl/$LANG_CODE/${basename_file}_template.rpy"
                
                echo "Processing: $basename_file"
                
                # Create translation template header
                cat << EOF > "$template_file"
          # Translation template for: $basename_file.rpy
          # Language: $LANG_CODE
          # Generated by GitHub Actions
          
          EOF
                
                # Extract translatable strings using improved regex
                python3 << 'PYTHON_EOF' >> "$template_file"
          import re
          import sys
          
          def extract_translatable_strings(file_path, lang_code):
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      content = f.read()
              except UnicodeDecodeError:
                  with open(file_path, 'r', encoding='latin1') as f:
                      content = f.read()
              
              lines = content.split('\n')
              translate_blocks = []
              current_label = "start"
              block_counter = 0
              
              for i, line in enumerate(lines):
                  # Detect label declarations
                  label_match = re.match(r'^\s*label\s+([a-zA-Z_][a-zA-Z0-9_]*)', line)
                  if label_match:
                      current_label = label_match.group(1)
                      print(f"\n# === Label: {current_label} ===")
                      continue
                      
                  # Detect character dialogue: character "text"
                  dialogue_match = re.match(r'^\s*([a-zA-Z_][a-zA-Z0-9_]*)\s+"([^"]+)"', line)
                  if dialogue_match:
                      character = dialogue_match.group(1)
                      text = dialogue_match.group(2)
                      block_counter += 1
                      print(f'translate {lang_code} {current_label}_{block_counter:03d}:')
                      print(f'    {character} "{text}"')
                      print()
                      continue
                      
                  # Detect narrator text: "text"
                  narrator_match = re.match(r'^\s*"([^"]+)"', line)
                  if narrator_match:
                      text = narrator_match.group(1)
                      block_counter += 1
                      print(f'translate {lang_code} {current_label}_{block_counter:03d}:')
                      print(f'    "{text}"')
                      print()
                      continue
                      
                  # Detect menu items
                  menu_match = re.match(r'^\s*"([^"]+)"\s*:', line)
                  if menu_match and 'menu:' in content[max(0, content.find(line) - 100):content.find(line)]:
                      text = menu_match.group(1)
                      block_counter += 1
                      print(f'translate {lang_code} {current_label}_choice_{block_counter:03d}:')
                      print(f'    "{text}"')
                      print()
          
          # Process the file
          extract_translatable_strings('$rpy_file', '$LANG_CODE')
          PYTHON_EOF
                
                echo "✓ Created template: ${basename_file}_template.rpy"
              fi
            done
            
            found_files=true
          fi
          
          # Verify output
          if [ "$(ls -A "output/tl/$LANG_CODE/" 2>/dev/null)" ]; then
            echo "✓ Template generation completed successfully"
          else
            echo "❌ No templates were generated"
            exit 1
          fi
          
      - name: Display Results
        run: |
          LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
          echo "=== Generated Translation Templates ==="
          echo "Language: $LANG_CODE"
          echo "Files created:"
          ls -la "output/tl/$LANG_CODE/"
          
          echo -e "\n=== Sample Content ==="
          for file in output/tl/$LANG_CODE/*.rpy; do
            if [ -f "$file" ]; then
              echo "--- $(basename "$file") ---"
              head -20 "$file"
              echo -e "\n"
              break
            fi
          done
          
      - name: Upload Translation Templates
        uses: actions/upload-artifact@v4
        with:
          name: renpy-translation-templates-${{ github.event.inputs.language_code || 'id' }}
          path: output/
          retention-days: 30
          
      - name: Commit Generated Templates
        run: |
          LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add generated files
          git add output/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Generate Ren'Py translation templates for $LANG_CODE [skip ci]"
            
            # Try to push (will fail if no write permissions)
            if git push; then
              echo "✓ Templates committed and pushed successfully"
            else
              echo "⚠ Could not push to repository (check permissions)"
            fi
          fi