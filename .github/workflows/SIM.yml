name: Hybrid Translation Generator (Most Reliable)

on:
  workflow_dispatch:
    inputs:
      language_code:
        description: 'Language code (id, en, jp, etc.)'
        required: false
        default: 'id'

jobs:
  generate-translation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Project Structure
      run: |
        mkdir -p game
        cp tl/*.rpy game/
        echo "Files to process:"
        find game/ -name "*.rpy" -type f -exec basename {} \;
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: Install Python Dependencies
      run: |
        pip install regex
        
    - name: Create Smart Translation Extractor
      run: |
        cat << 'EOF' > smart_extract.py
        import re
        import os
        import glob
        import sys
        
        def extract_translatable_content(file_path, lang_code):
            """Extract dialogue, menus, and narration from RenPy files"""
            
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            lines = content.split('\n')
            template_lines = []
            current_label = None
            block_counter = 0
            
            for i, line in enumerate(lines):
                original_line = line
                stripped = line.strip()
                
                # Skip empty lines and comments
                if not stripped or stripped.startswith('#'):
                    continue
                
                # Extract labels
                label_match = re.match(r'label\s+(\w+)(?:\(.*\))?:', stripped)
                if label_match:
                    current_label = label_match.group(1)
                    template_lines.append(f"\n# === Label: {current_label} ===")
                    continue
                
                # Extract character dialogue
                dialogue_match = re.match(r'(\w+)\s+"([^"]+)"(?:\s+with\s+\w+)?', stripped)
                if dialogue_match:
                    char_name = dialogue_match.group(1)
                    dialogue_text = dialogue_match.group(2)
                    block_counter += 1
                    
                    label_name = current_label or 'unknown'
                    template_lines.append(f'translate {lang_code} {label_name}_{block_counter}:')
                    template_lines.append(f'    {char_name} "{dialogue_text}"')
                    template_lines.append('')
                    continue
                
                # Extract narration (quoted text without character)
                narration_match = re.match(r'"([^"]+)"', stripped)
                if narration_match and not dialogue_match:
                    narration_text = narration_match.group(1)
                    block_counter += 1
                    
                    label_name = current_label or 'unknown'
                    template_lines.append(f'translate {lang_code} {label_name}_{block_counter}:')
                    template_lines.append(f'    "{narration_text}"')
                    template_lines.append('')
                    continue
                
                # Extract menu blocks
                if stripped == 'menu:':
                    menu_choices = []
                    j = i + 1
                    indent_level = len(original_line) - len(original_line.lstrip())
                    
                    # Look ahead for menu choices
                    while j < len(lines):
                        choice_line = lines[j]
                        choice_stripped = choice_line.strip()
                        choice_indent = len(choice_line) - len(choice_line.lstrip())
                        
                        if not choice_stripped:
                            j += 1
                            continue
                            
                        if choice_indent <= indent_level and choice_stripped and not choice_stripped.startswith('"'):
                            break
                            
                        # Found a menu choice
                        choice_match = re.match(r'"([^"]+)":', choice_stripped)
                        if choice_match:
                            choice_text = choice_match.group(1)
                            menu_choices.append(choice_text)
                        
                        j += 1
                    
                    if menu_choices:
                        block_counter += 1
                        label_name = current_label or 'unknown'
                        template_lines.append(f'translate {lang_code} {label_name}_menu_{block_counter}:')
                        template_lines.append('    menu:')
                        for choice in menu_choices:
                            template_lines.append(f'        "{choice}":')
                            template_lines.append('            # Jump/call destination unchanged')
                        template_lines.append('')
            
            return template_lines
        
        def main():
            lang_code = sys.argv[1] if len(sys.argv) > 1 else 'id'
            output_dir = f'output/tl/{lang_code}'
            os.makedirs(output_dir, exist_ok=True)
            
            # Process all .rpy files
            rpy_files = glob.glob('game/*.rpy')
            print(f"Processing {len(rpy_files)} .rpy files...")
            
            for rpy_file in rpy_files:
                print(f"Processing: {rpy_file}")
                
                base_name = os.path.splitext(os.path.basename(rpy_file))[0]
                output_file = f'{output_dir}/{base_name}_tl.rpy'
                
                templates = extract_translatable_content(rpy_file, lang_code)
                
                if templates:
                    with open(output_file, 'w', encoding='utf-8') as f:
                        f.write(f'# Translation template for {rpy_file}\n')
                        f.write(f'# Language: {lang_code}\n')
                        f.write(f'# Generated automatically - edit the translations below\n\n')
                        f.write('\n'.join(templates))
                    
                    print(f"  âœ“ Created: {base_name}_tl.rpy ({len(templates)} lines)")
                else:
                    print(f"  ! No translatable content found in {rpy_file}")
            
            print(f"\nTranslation templates generated in: {output_dir}/")
        
        if __name__ == "__main__":
            main()
        EOF
        
    - name: Generate Translation Templates
      run: |
        LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
        echo "Generating translation templates for language: $LANG_CODE"
        
        python smart_extract.py "$LANG_CODE"
        
    - name: Create Additional Files
      run: |
        LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
        
        # Create strings template for UI translations
        cat << EOF > "output/tl/$LANG_CODE/strings_tl.rpy"
        # UI Strings Translation Template
        # Language: $LANG_CODE
        
        translate $LANG_CODE strings:
            # Main menu
            old "Start"
            new "Mulai"
            
            old "Load"
            new "Muat"
            
            old "Preferences"
            new "Pengaturan"
            
            old "Save"
            new "Simpan"
            
            old "Main Menu"
            new "Menu Utama"
            
            old "History"
            new "Riwayat"
            
            old "Skip"
            new "Lewati"
            
            old "Auto"
            new "Otomatis"
            
            old "Quick Save"
            new "Simpan Cepat"
            
            old "Quick Load"
            new "Muat Cepat"
        EOF
        
        # Create README
        cat << EOF > "output/tl/$LANG_CODE/README.md"
        # Translation Files for Language: $LANG_CODE
        
        ## Files Generated:
        EOF
        
        ls output/tl/$LANG_CODE/*.rpy >> "output/tl/$LANG_CODE/README.md"
        
        echo "" >> "output/tl/$LANG_CODE/README.md"
        echo "## Usage:" >> "output/tl/$LANG_CODE/README.md"
        echo "1. Edit the Indonesian text in each *_tl.rpy file" >> "output/tl/$LANG_CODE/README.md"
        echo "2. Copy all files to your Ren'Py game's tl/$LANG_CODE/ folder" >> "output/tl/$LANG_CODE/README.md"
        echo "3. Build/run your game to test translations" >> "output/tl/$LANG_CODE/README.md"
        
    - name: Show Results
      run: |
        LANG_CODE="${{ github.event.inputs.language_code || 'id' }}"
        echo "Generated translation templates for: $LANG_CODE"
        echo "Files created:"
        ls -la "output/tl/$LANG_CODE/"
        
        echo -e "\nSample content from first file:"
        first_file=$(ls "output/tl/$LANG_CODE"/*.rpy 2>/dev/null | head -1)
        if [ -f "$first_file" ]; then
          head -20 "$first_file"
        fi
        
    - name: Upload Templates
      uses: actions/upload-artifact@v4
      with:
        name: translation-templates-${{ github.event.inputs.language_code || 'id' }}
        path: output/