name: Convert RPYC to RPY (Simple Docker)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  convert-rpyc:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create directories
      run: |
        mkdir -p to_rpy
        mkdir -p converted_rpy
        # Fix permissions for Docker output
        chmod 777 converted_rpy
        
    - name: Convert using RenPy Docker
      run: |
        if [ -d "to_rpy" ] && [ "$(find to_rpy -name '*.rpyc' -type f | wc -l)" -gt 0 ]; then
          echo "Converting .rpyc files using multiple methods..."
          
          # Method 1: Try with proper unrpyc installation
          echo "=== Method 1: Docker with unrpyc ==="
          docker run --rm -v $(pwd)/to_rpy:/input -v $(pwd)/converted_rpy:/output \
            python:3.9 bash -c "
            pip install git+https://github.com/CensoredUsername/unrpyc.git
            cd /input
            for file in *.rpyc; do
              if [ -f \"\$file\" ]; then
                echo 'Converting: \$file'
                filename=\${file%.rpyc}
                
                # Method 1: Try unrpyc with proper output file specification
                unrpyc \"\$file\" -o \"/output/\${filename}.rpy\" 2>/dev/null ||
                
                # Method 2: Try unrpyc with directory output
                unrpyc \"\$file\" --output-dir /output 2>/dev/null ||
                
                # Method 3: Try without -c flag, redirect properly
                (unrpyc \"\$file\" 2>/dev/null | head -n -10 > \"/output/\${filename}.rpy\") ||
                
                # Method 4: Try python module
                python -m unrpyc \"\$file\" -o \"/output/\${filename}.rpy\" 2>/dev/null ||
                
                echo 'All methods failed for \$file'
              fi
            done
            echo 'Docker conversion done'
            ls -la /output/
            # Show content samples
            for f in /output/*.rpy; do
              if [ -f \"\$f\" ] && [ -s \"\$f\" ]; then
                echo \"=== Sample from \$(basename \"\$f\") ====\"
                head -5 \"\$f\" 2>/dev/null | grep -v \"Unrpyc\" | grep -v \"results summary\" | grep -v \"---\" || echo \"No clean content\"
              fi
            done
            # Fix permissions
            chown -R 1001:121 /output/* 2>/dev/null || true
            chmod 644 /output/* 2>/dev/null || true
            " && echo "✅ Docker method completed" || echo "❌ Docker method failed"
          
          # Fix permissions after Docker
          sudo chown -R $USER:$USER converted_rpy/ 2>/dev/null || true
          chmod -R 644 converted_rpy/*.rpy 2>/dev/null || true
            
          # Method 2: Native Linux approach
          echo ""
          echo "=== Method 2: Check Docker Results First ==="
          
          # Check if Docker already converted files successfully
          if [ "$(ls -A converted_rpy/ 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "✅ Docker conversion was successful! Files found:"
            ls -la converted_rpy/
            
            # Check content quality
            echo "Content quality check:"
            for f in converted_rpy/*.rpy; do
              if [ -f "$f" ]; then
                size=$(stat -c%s "$f" 2>/dev/null || echo "0")
                lines=$(wc -l < "$f" 2>/dev/null || echo "0")
                echo "  $(basename "$f"): ${size} bytes, ${lines} lines"
                
                # Check if file contains actual RenPy code vs just unrpyc output
                if grep -q "Unrpyc.*results summary\|Performing decompilation\|file were successfully" "$f" 2>/dev/null; then
                  echo "    ❌ Contains unrpyc log output, not decompiled code"
                  # Try to clean the file
                  grep -v "Unrpyc\|results summary\|Performing decompilation\|file were successfully\|---\|Found.*file to process\|Decompiling.*to" "$f" > "${f}.clean" 2>/dev/null
                  if [ -s "${f}.clean" ]; then
                    mv "${f}.clean" "$f"
                    echo "    ✅ Cleaned file, new size: $(stat -c%s "$f") bytes"
                  else
                    rm -f "${f}.clean"
                  fi
                fi
                
                if [ "$size" -gt 50 ]; then
                  echo "    Sample content:"
                  head -3 "$f" 2>/dev/null | grep -v "^$" | sed 's/^/      /' || echo "      Cannot read content"
                fi
              fi
            done
            
            echo "✅ Docker conversion sufficient, skipping native methods"
            
          else
            echo "❌ Docker conversion failed, trying native methods..."
            
            # Install unrpyc directly
            pip3 install git+https://github.com/CensoredUsername/unrpyc.git || echo "pip install failed"
          
            # Try to convert each file
            for file in $(find to_rpy -name "*.rpyc" -type f); do
              filename=$(basename "$file" .rpyc)
              output="converted_rpy/${filename}.rpy"
              echo "Processing: $file -> $output"
              
              # Check file type first
              echo "  File type: $(file "$file")"
              echo "  File size: $(stat -c%s "$file") bytes"
              
              # Try multiple conversion approaches  
              if unrpyc "$file" -o "$output" 2>/dev/null && [ -s "$output" ]; then
                echo "  ✅ Success with unrpyc -o"
              elif unrpyc "$file" --output-dir "converted_rpy/" 2>/dev/null && [ -s "$output" ]; then
                echo "  ✅ Success with unrpyc --output-dir"
              elif python3 -m unrpyc "$file" -o "$output" 2>/dev/null && [ -s "$output" ]; then
                echo "  ✅ Success with python3 -m unrpyc -o"
              else
                echo "  ❌ All proper unrpyc methods failed"
                
                # Try alternative decompilation method
                echo "  Trying manual decompilation..."
                python3 -c "
import sys, os
sys.path.insert(0, os.path.expanduser('~/.local/lib/python*/site-packages'))
try:
    import unrpyc
    with open('$file', 'rb') as f:
        data = f.read()
    # Try to decompile
    result = unrpyc.decompile_rpyc(data)
    if result and len(result) > 100:
        with open('$output', 'w', encoding='utf-8') as f:
            f.write(result)
        print('Manual decompilation successful')
    else:
        print('Manual decompilation returned empty/small result')
except Exception as e:
    print('Manual decompilation failed:', e)
" 2>/dev/null && [ -s "$output" ] && echo "  ✅ Success with manual method" || echo "  ❌ Manual method failed"
                
                if [ ! -s "$output" ]; then
                  # Last resort: extract strings that look like RenPy code
                  echo "  Trying string extraction..."
                  strings "$file" | grep -E "(label|menu|scene|show|say|jump|call|define)" > "$output" 2>/dev/null
                  
                  if [ -s "$output" ]; then
                    echo "  ✅ Extracted $(wc -l < "$output") lines with string method"
                  else
                    echo "  ❌ String extraction failed"
                    
                    # Very last resort: just extract all strings
                    strings "$file" > "$output" 2>/dev/null
                    if [ -s "$output" ]; then
                      echo "  ⚠️ Extracted all strings ($(wc -l < "$output") lines)"
                    else
                      echo "  ❌ No content could be extracted"
                    fi
                  fi
                fi
              fi
              
              # Show what we got
              if [ -f "$output" ] && [ -s "$output" ]; then
                echo "  Output size: $(stat -c%s "$output") bytes"
                echo "  First few lines:"
                head -3 "$output" | sed 's/^/    /'
              else
                echo "  No output generated"
              fi
              echo ""
            done
          fi
          
          echo "=== Final Results ==="
          if [ "$(ls -A converted_rpy/ 2>/dev/null)" ]; then
            echo "✅ Files in output directory:"
            ls -la converted_rpy/
            echo ""
            echo "Content summary:"
            for f in converted_rpy/*.rpy; do
              if [ -f "$f" ]; then
                size=$(stat -c%s "$f" 2>/dev/null || echo "0")
                echo "  $(basename "$f"): ${size} bytes"
              fi
            done
          else
            echo "❌ No output files generated"
            echo "Debugging info:"
            echo "Input files:"
            ls -la to_rpy/
            echo "File types:"
            for f in to_rpy/*.rpyc; do
              [ -f "$f" ] && echo "  $f: $(file "$f")"
            done
          fi
        else
          echo "No .rpyc files found in to_rpy folder"
        fi
        
    - name: Upload converted files
      uses: actions/upload-artifact@v4
      if: hashFiles('converted_rpy/*') != ''
      with:
        name: converted-rpy-files
        path: converted_rpy/