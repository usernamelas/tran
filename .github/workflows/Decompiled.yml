name: Convert RPYC to RPY‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏èüíÄ

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  convert-rpyc:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Create directories
      run: |
        mkdir -p to_rpy
        mkdir -p converted_rpy
        
    - name: Install unrpyc
      run: |
        python -m pip install --upgrade pip
        
        echo "=== Trying installation method 1: Direct git install ==="
        if pip install git+https://github.com/CensoredUsername/unrpyc.git; then
          echo "‚úÖ Method 1 successful"
        else
          echo "‚ùå Method 1 failed"
          
          echo "=== Trying installation method 2: Clone and install ==="
          if git clone https://github.com/CensoredUsername/unrpyc.git && cd unrpyc && pip install .; then
            echo "‚úÖ Method 2 successful"
            cd ..
          else
            echo "‚ùå Method 2 failed"
            
            echo "=== Trying installation method 3: Download script directly ==="
            wget -O unrpyc.py https://raw.githubusercontent.com/CensoredUsername/unrpyc/master/unrpyc.py || \
            curl -o unrpyc.py https://raw.githubusercontent.com/CensoredUsername/unrpyc/master/unrpyc.py || \
            echo "‚ùå Method 3 failed"
          fi
        fi
        
        echo "=== Checking installation ==="
        which unrpyc || echo "unrpyc command not found in PATH"
        python -c "import unrpyc; print('‚úÖ unrpyc module available')" 2>/dev/null || echo "‚ùå unrpyc module not importable"
        ls -la unrpyc.py 2>/dev/null && echo "‚úÖ unrpyc.py script available" || echo "‚ùå unrpyc.py script not found"
        
    - name: Check for RPYC files
      run: |
        echo "Checking for .rpyc files in to_rpy folder..."
        if [ -d "to_rpy" ]; then
          find to_rpy -name "*.rpyc" -type f | head -10
          RPYC_COUNT=$(find to_rpy -name "*.rpyc" -type f | wc -l)
          echo "Found $RPYC_COUNT .rpyc files"
        else
          echo "to_rpy folder not found"
        fi
        
    - name: Convert RPYC to RPY
      run: |
        if [ -d "to_rpy" ] && [ "$(find to_rpy -name '*.rpyc' -type f | wc -l)" -gt 0 ]; then
          echo "Converting .rpyc files to .rpy..."
          
          for file in $(find to_rpy -name "*.rpyc" -type f); do
            echo "Converting: $file"
            filename=$(basename "$file" .rpyc)
            output_file="converted_rpy/${filename}.rpy"
            
            # Method 1: Try unrpyc command
            if command -v unrpyc >/dev/null 2>&1; then
              echo "  Trying: unrpyc command..."
              if unrpyc -c "$file" > "$output_file" 2>/dev/null; then
                echo "  ‚úÖ Success with unrpyc -c"
                continue
              elif unrpyc "$file" > "$output_file" 2>/dev/null; then
                echo "  ‚úÖ Success with unrpyc"
                continue
              else
                echo "  ‚ùå unrpyc command failed"
              fi
            fi
            
            # Method 2: Try python -m unrpyc
            echo "  Trying: python -m unrpyc..."
            if python -m unrpyc -c "$file" > "$output_file" 2>/dev/null; then
              echo "  ‚úÖ Success with python -m unrpyc -c"
              continue
            elif python -m unrpyc "$file" > "$output_file" 2>/dev/null; then
              echo "  ‚úÖ Success with python -m unrpyc"
              continue
            else
              echo "  ‚ùå python -m unrpyc failed"
            fi
            
            # Method 3: Try direct Python import
            echo "  Trying: direct Python import..."
            if python -c "
import sys
sys.path.append('.')
try:
    import unrpyc
    with open('$file', 'rb') as f:
        data = f.read()
    result = unrpyc.decompile_rpyc(data)
    with open('$output_file', 'w') as f:
        f.write(result)
    print('Success with direct import')
except Exception as e:
    print(f'Error: {e}')
    sys.exit(1)
" 2>/dev/null; then
              echo "  ‚úÖ Success with direct Python import"
              continue
            else
              echo "  ‚ùå Direct Python import failed"
            fi
            
            # Method 4: Try with unrpyc.py script
            if [ -f "unrpyc.py" ]; then
              echo "  Trying: unrpyc.py script..."
              if python unrpyc.py -c "$file" > "$output_file" 2>/dev/null; then
                echo "  ‚úÖ Success with unrpyc.py -c"
                continue
              elif python unrpyc.py "$file" > "$output_file" 2>/dev/null; then
                echo "  ‚úÖ Success with unrpyc.py"
                continue
              else
                echo "  ‚ùå unrpyc.py script failed"
              fi
            fi
            
            echo "  ‚ùå All methods failed for $file"
          done
          
          echo ""
          echo "=== Conversion Summary ==="
          if [ "$(ls -A converted_rpy/ 2>/dev/null)" ]; then
            echo "‚úÖ Conversion completed successfully!"
            echo "Converted files:"
            ls -la converted_rpy/
            echo ""
            echo "Sample content from first converted file:"
            head -10 converted_rpy/$(ls converted_rpy/ | head -1) 2>/dev/null || echo "Cannot show sample content"
          else
            echo "‚ùå No files were converted"
            echo ""
            echo "=== Debugging Info ==="
            echo "File details:"
            for file in $(find to_rpy -name "*.rpyc" -type f | head -3); do
              echo "  File: $file"
              echo "    Size: $(stat -c%s "$file" 2>/dev/null || echo 'unknown') bytes"
              echo "    Type: $(file "$file" 2>/dev/null || echo 'unknown')"
              echo "    First few bytes: $(xxd -l 16 "$file" 2>/dev/null || echo 'cannot read')"
            done
          fi
        else
          echo "No .rpyc files found in to_rpy folder"
          echo "Please add .rpyc files to the to_rpy folder and run again"
        fi
        
    - name: Upload converted files
      uses: actions/upload-artifact@v4
      if: hashFiles('converted_rpy/*') != ''
      with:
        name: converted-rpy-files
        path: converted_rpy/
        
    - name: Commit converted files (optional)
      if: hashFiles('converted_rpy/*') != ''
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add converted_rpy/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "‚ú® Add converted .rpy files from .rpyc [automated]"
          git push && echo "‚úÖ Files committed and pushed successfully" || echo "‚ö†Ô∏è Push failed - may need permissions"
        fi
      continue-on-error: true